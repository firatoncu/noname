name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_DEFAULT_VERSION: "3.11"

jobs:
  # Code Quality Checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Run linting
      run: |
        python tests/run_tests.py --lint
    
    - name: Check code formatting
      run: |
        python -m black --check src/ tests/
        python -m isort --check-only src/ tests/

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Reduce matrix size for faster CI
          - os: windows-latest
            python-version: "3.9"
          - os: macos-latest
            python-version: "3.9"
          - os: windows-latest
            python-version: "3.12"
          - os: macos-latest
            python-version: "3.12"
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Run unit tests
      run: |
        python tests/run_tests.py --unit --verbose --parallel
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          .pytest_cache/
          test-results.xml
        retention-days: 7

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Run integration tests
      run: |
        python tests/run_tests.py --integration --verbose
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results-${{ matrix.python-version }}
        path: |
          .pytest_cache/
          test-results.xml
        retention-days: 7

  # Coverage Testing
  coverage:
    name: Coverage Analysis
    runs-on: ubuntu-latest
    needs: [unit-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Run tests with coverage
      run: |
        python tests/run_tests.py --coverage --verbose
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: |
          htmlcov/
          coverage.xml
        retention-days: 30

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf]')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,performance]
    
    - name: Run performance tests
      run: |
        python tests/run_tests.py --performance --verbose
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: |
          .benchmarks/
        retention-days: 30

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install bandit safety
    
    - name: Run security linting with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
    
    - name: Check dependencies for security vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Run security tests
      run: |
        python tests/run_tests.py --security --verbose
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  # Smoke Tests
  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: [code-quality]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Run smoke tests
      run: |
        python tests/run_tests.py --smoke --verbose

  # Documentation Tests
  docs-tests:
    name: Documentation Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install sphinx sphinx-rtd-theme
    
    - name: Test documentation build
      run: |
        # Add documentation build commands here when docs are added
        echo "Documentation tests would run here"

  # Dependency Check
  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install pip-audit
    
    - name: Check for dependency vulnerabilities
      run: |
        pip-audit --format=json --output=pip-audit-report.json || true
    
    - name: Upload dependency report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-report
        path: pip-audit-report.json
        retention-days: 30

  # Test Report Generation
  test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, coverage]
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Generate comprehensive test report
      run: |
        python tests/run_tests.py --report --verbose
    
    - name: Upload comprehensive test report
      uses: actions/upload-artifact@v3
      with:
        name: comprehensive-test-report
        path: test_reports_*/
        retention-days: 30

  # Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, coverage, security-tests]
    if: always() && (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    steps:
    - name: Notify on success
      if: needs.unit-tests.result == 'success' && needs.integration-tests.result == 'success' && needs.coverage.result == 'success'
      run: |
        echo "✅ All tests passed successfully!"
        # Add notification logic here (Slack, Discord, email, etc.)
    
    - name: Notify on failure
      if: needs.unit-tests.result == 'failure' || needs.integration-tests.result == 'failure' || needs.coverage.result == 'failure'
      run: |
        echo "❌ Some tests failed!"
        # Add notification logic here (Slack, Discord, email, etc.)

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [test-report]
    if: always()
    
    steps:
    - name: Clean up old artifacts
      uses: actions/github-script@v6
      with:
        script: |
          const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: context.runId,
          });
          
          // Keep only the most recent 10 artifacts
          const oldArtifacts = artifacts.data.artifacts
            .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
            .slice(10);
          
          for (const artifact of oldArtifacts) {
            try {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
              });
              console.log(`Deleted artifact: ${artifact.name}`);
            } catch (error) {
              console.log(`Failed to delete artifact ${artifact.name}: ${error.message}`);
            }
          } 